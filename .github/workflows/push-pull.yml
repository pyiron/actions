# This runs jobs which pyiron modules should run on pushes or PRs to main
# Usage:
#   on:
#     push:
#       branches: [ main ]
#     pull_request:
#       branches: [ main ]

name: Push or Pull

on:
  workflow_call:
    inputs:
      do-commit-updated-env:
        type: boolean
        description: 'Feature flag: controls if the commit-updated-env step does anything or gets skipped over.'
        default: true
        required: false
      do-build-docs:
        type: boolean
        description: 'Feature flag: controls if the build-docs job runs.'
        default: true
        required: false
      do-build-notebooks:
        type: boolean
        description: 'Feature flag: controls if the build-notebooks job runs.'
        default: true
        required: false
      do-unit-tests:
        type: boolean
        description: 'Feature flag: controls if the unit-tests job runs.'
        default: true
        required: false
      do-coveralls-and-codacy:
        type: boolean
        description: 'Feature flag: controls if the coveralls-and-codacy job runs.'
        default: true
        required: false
      do-benchmark-tests:
        type: boolean
        description: 'Feature flag: controls if the benchmark-tests job runs.'
        default: true
        required: false
      do-pip-check:
        type: boolean
        description: 'Feature flag: controls if the pip-check job runs.'
        default: true
        required: false
      do-black:
        type: boolean
        description: 'Feature flag: controls if the black job runs.'
        default: true
        required: false
      docs-env-files:
        type: string
        description: 'Paths to an arbitrary number of (space-separated) conda environment yaml files'
        default: .ci_support/environment.yml
        required: false
      notebooks-env-files:
        type: string
        description: 'Paths to an arbitrary number of (space-separated) conda environment yaml files'
        default: .ci_support/environment.yml
        required: false
      notebooks-exclusion-file:
        type: string
        description: 'An optional path to a file containing the names of notebooks to NOT build'
        default: .ci_support/exclude
        required: false
      tests-env-files:
        type: string
        description: 'Paths to an arbitrary number of (space-separated) conda environment yaml files'
        default: .ci_support/environment.yml
        required: false
      alternate-tests-env-files:
        type: string
        description: 'An alternate set of (space-separated) conda environment yaml files, e.g. to test a lower-bounds environment. Skipped if empty'
        required: false
      benchmark-timeout-minutes:
        type: number
        description: 'How many minutes to allow tests in units/benchmark to run for'
        default: 30
        required: false
      tests-in-python-path:
        type: boolean
        description: 'Whether to add the canonical test dirs (tests/( ,benchmark,integration,unit)) to the PYTHONPATH. This is a required workaround for repos that use `pympipool` executors, [cf. this issue](https://github.com/pyiron/pympipool/issues/239).'
        default: false
        required: false
      runner:
        type: string
        description: 'The main runner to use everywhere'
        default: 'ubuntu-latest'
        required: false
      runner-alt1:
        type: string
        description: 'An alternate runner for the unit tests (only on the main python version). Set to the string exclude to skip'
        default: 'windows-latest'
        required: false
      runner-alt2:
        type: string
        description: 'Another alternate runner for the unit tests (only on the main python version). Set to the string exclude to skip'
        default: 'macos-latest'
        required: false
      python-version:
        type: string
        description: 'The main version of python to test on, used across all three OS for tests and in other steps'
        default: '3.11'
        required: false
      python-version-alt1:
        type: string
        description: 'An alternate  version of python to run unit tests on, used only on the main runner. Set to the string exclude to skip'
        default: '3.10'
        required: false
      python-version-alt2:
        type: string
        description: 'An alternate  version of python to run unit tests on, used only on the main runner. Set to the string exclude to skip'
        default: '3.9'
        required: false
      python-version-alt3:
        type: string
        description: 'An alternate  version of python to run unit tests on, used only on the main runner. Set to the string exclude to skip'
        default: '3.12'
        required: false
      unit-test-dir:
        type: string
        description: 'The directory containing the unit tests run on the full platform and python matrix'
        default: tests/unit
        required: false
      coveralls-and-codacy-test-dir:
        type: string
        description: 'The directory containing the tests analyzed by coveralls'
        default: tests
        required: false
      benchmark-test-dir:
        type: string
        description: 'The directory containing the benchmark tests'
        default: tests/benchmark
        required: false
      alternate-test-dir:
        type: string
        description: 'The directory containing the tests run with the alternate environment'
        default: tests
        required: false
      omit-patterns:
        type: string
        description: 'Patterns passed to --omit for skipping coverage in all unit test calls'
        default: '*/_version.py'
        required: false


jobs:
  commit-updated-env:  # Keep envs read by external sources (binder and readthedocs) up-to-date
    if: ${{ inputs.do-commit-updated-env }}
    runs-on: ${{ inputs.runner }}
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.DEPENDABOT_WORKFLOW_TOKEN }}
          ref: ${{ github.event.pull_request.head.ref }} # Check out the head of the actual branch, not the PR
          fetch-depth: 0 # otherwise, you will fail to push refs to dest repo
      - uses: pyiron/actions/write-docs-env@v2.0.6
        with:
          env-files: ${{ inputs.docs-env-files }}
      - uses: pyiron/actions/write-environment@v2.0.6
        with:
          env-files: ${{ inputs.notebooks-env-files }}
          output-env-file: .binder/environment.yml
      - name: commit
        id: commit-docs-env
        continue-on-error: true  # Allow "failure" when there are no changes (the working tree is clean)
        run: |
          git config --local user.email "pyiron@mpie.de"
          git config --local user.name "pyiron-runner"
          git add docs/environment.yml .binder/environment.yml
          git commit -m "[dependabot skip] Update env file" -a
      - name: push
        if: steps.commit-docs-env.outcome == 'success'  # But only push if we made it here without continue-on-error
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.DEPENDABOT_WORKFLOW_TOKEN }}
          branch: ${{ github.event.pull_request.head.ref }}

  build-docs:
    needs: commit-updated-env
    if: ${{ inputs.do-build-docs }}
    runs-on: ${{ inputs.runner }}
    steps:
      - uses: actions/checkout@v3
      - uses: pyiron/actions/build-docs@v2.0.6
        with:
          python-version: ${{ inputs.python-version }}
          env-prefix: /usr/share/miniconda3/envs/my-env
          env-label: ${{ inputs.runner }}-py-main
          env-files: ${{ inputs.docs-env-files }}

  build-notebooks:
    needs: commit-updated-env
    if: ${{ inputs.do-build-notebooks }}
    runs-on: ${{ inputs.runner }}
    steps:
      - uses: actions/checkout@v3
      - uses: pyiron/actions/build-notebooks@v2.0.6
        with:
          python-version: ${{ inputs.python-version }}
          env-prefix: /usr/share/miniconda3/envs/my-env
          env-label: ${{ inputs.runner }}-py-main
          env-files: ${{ inputs.notebooks-env-files }}
          exclusion-file: ${{ inputs.notebooks-exclusion-file }}


  unit-tests:
    needs: commit-updated-env
    if: ${{ inputs.do-unit-tests }}
    runs-on: ${{ matrix.operating-system }}
    # All three runners for the highest python version
    # Only the main for up to two more versions of python
    strategy:
      matrix:
        operating-system: ["${{ inputs.runner }}", "${{ inputs.runner-alt1 }}", "${{ inputs.runner-alt2 }}"]
        python-version: ["${{ inputs.python-version }}", "${{ inputs.python-version-alt1 }}", "${{ inputs.python-version-alt2 }}", "${{ inputs.python-version-alt3 }}"]
        exclude:
          # Get rid of all combinations of alternative runners and alternative python versions
          - operating-system: ${{ inputs.runner-alt1 }}
            python-version: ${{ inputs.python-version-alt1 }}
          - operating-system: ${{ inputs.runner-alt1 }}
            python-version: ${{ inputs.python-version-alt2 }}
          - operating-system: ${{ inputs.runner-alt1 }}
            python-version: ${{ inputs.python-version-alt3 }}
          - operating-system: ${{ inputs.runner-alt2 }}
            python-version: ${{ inputs.python-version-alt1 }}
          - operating-system: ${{ inputs.runner-alt2 }}
            python-version: ${{ inputs.python-version-alt2 }}
          - operating-system: ${{ inputs.runner-alt2 }}
            python-version: ${{ inputs.python-version-alt3 }}
          # Don't run anything tagged with "exclude"
          - operating-system: 'exclude'
          - python-version: 'exclude'

    steps:
    - uses: actions/checkout@v3
    - uses: pyiron/actions/add-to-python-path@v2.0.6
      if: ${{ inputs.tests-in-python-path }}
      with:
        path-dirs: tests tests/benchmark tests/integration tests/unit
    - id: replace_dot
      shell: bash -l {0}
      run: |
        pyversion_string=${{ matrix.python-version }}
        echo "pyversion_string=${pyversion_string/\./-}" >> $GITHUB_OUTPUT
    - id: determine_conda_prefix
      shell: bash -l {0}
      run: |
        os_string=${{ matrix.operating-system }}
        if [[ ${os_string} == "macos-"* ]]; then
          echo "env_prefix_string=/Users/runner/miniconda3/envs/my-env" >> $GITHUB_OUTPUT
        elif [[ ${os_string} == "windows-"* ]]; then
          echo "env_prefix_string=C:\Miniconda3\envs\my-env" >> $GITHUB_OUTPUT
        elif [[ ${os_string} == "ubuntu-"* ]]; then
          echo "env_prefix_string=/usr/share/miniconda3/envs/my-env" >> $GITHUB_OUTPUT
        fi
    - uses: pyiron/actions/unit-tests@v2.0.6
      with:
        python-version: ${{ matrix.python-version }}
        env-prefix: ${{ steps.determine_conda_prefix.outputs.env_prefix_string }}
        env-label: ${{ matrix.operating-system }}-py-${{ steps.replace_dot.outputs.pyversion_string }}
        env-files: ${{ inputs.tests-env-files }}
        test-dir: ${{ inputs.unit-test-dir }}
        omit-patterns: ${{ inputs.omit-patterns }}

  coveralls-and-codacy:
    needs: commit-updated-env
    if: ${{ inputs.do-coveralls-and-codacy }}
    uses: pyiron/actions/.github/workflows/tests-and-coverage.yml@v2.0.6
    secrets: inherit
    with:
      tests-env-files: ${{ inputs.tests-env-files }}
      tests-in-python-path: ${{ inputs.tests-in-python-path }}
      runner: ${{ inputs.runner }}
      python-version: ${{ inputs.python-version }}
      test-dir: ${{ inputs.coveralls-and-codacy-test-dir }}
      omit-patterns: ${{ inputs.omit-patterns }}

  benchmark-tests:
    needs: commit-updated-env
    if: ${{ inputs.do-benchmark-tests }}
    runs-on: ${{ inputs.runner }}
    steps:
    - uses: actions/checkout@v3
    - uses: pyiron/actions/unit-tests@v2.0.6
      with:
        python-version: ${{ inputs.python-version }}
        env-prefix: /usr/share/miniconda3/envs/my-env
        env-label: ${{ inputs.runner }}-py-main
        env-files: ${{ inputs.tests-env-files }}
        test-dir: ${{ inputs.benchmark-test-dir }}
        omit-patterns: ${{ inputs.omit-patterns }}
      timeout-minutes: ${{ inputs.benchmark-timeout-minutes }}

  test-alternate-env:
    if: ${{ inputs.alternate-tests-env-files != '' }}
    runs-on: ${{ inputs.runner }}
    steps:
    - uses: actions/checkout@v3
    - uses: pyiron/actions/unit-tests@v2.0.6
      with:
        python-version: ${{ inputs.python-version }}
        env-prefix: /usr/share/miniconda3/envs/my-env
        env-label: ${{ inputs.runner }}-py-main
        env-files: ${{ inputs.alternate-tests-env-files }}
        test-dir: ${{ inputs.alternate-test-dir }}
        omit-patterns: ${{ inputs.omit-patterns }}

  pip-check:
    needs: commit-updated-env
    if: ${{ inputs.do-pip-check }}
    runs-on: ${{ inputs.runner }}
    steps:
      - uses: actions/checkout@v3
      - uses: pyiron/actions/pip-check@v2.0.6
        with:
          python-version: ${{ inputs.python-version }}
          env-prefix: /usr/share/miniconda3/envs/my-env
          env-label: ${{ inputs.runner }}-py-main

  black:
    needs: commit-updated-env
    if: ${{ inputs.do-black }}
    runs-on: ${{ inputs.runner }}
    steps:
      - uses: actions/checkout@v3
      - uses: psf/black@stable
        with:
          options: "--check --diff"
          src: ./${{ github.event.repository.name }}
