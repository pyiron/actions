# This runs jobs which pyiron modules should run on pushes or PRs to main
# Usage:
#   on:
#     push:
#       branches: [ main ]
#     pull_request:
#       branches: [ main ]

name: Push or Pull to main

on:
  workflow_call:
    inputs:
      docs-env-files:
        type: string
        description: 'Paths to an arbitrary number of (space-separated) conda environment yaml files'
        default: .ci_support/environment.yml
        required: false
      notebooks-env-files:
        type: string
        description: 'Paths to an arbitrary number of (space-separated) conda environment yaml files'
        default: .ci_support/environment.yml
        required: false
      notebooks-exclusion-file:
        type: string
        description: 'An optional path to a file containing the names of notebooks to NOT build'
        default: .ci_support/exclude
        required: false
      tests-env-files:
        type: string
        description: 'Paths to an arbitrary number of (space-separated) conda environment yaml files'
        default: .ci_support/environment.yml
        required: false

jobs:
  commit-readthedocs-env:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.DEPENDABOT_WORKFLOW_TOKEN }}
          ref: ${{ github.event.pull_request.head.ref }} # Check out the head of the actual branch, not the PR
          fetch-depth: 0 # otherwise, you will fail to push refs to dest repo
      - uses: pyiron/actions/write-docs-env@main
      - name: commit
        id: commit-docs-env
        continue-on-error: true  # Allow "failure" when there are no changes (the working tree is clean)
        run: |
          git config --local user.email "pyiron@mpie.de"
          git config --local user.name "pyiron-runner"
          git commit -m "Update docs env file" -a
      - name: push
        if: steps.commit-docs-env.outcome == 'success'  # But only push if we made it here without continue-on-error
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.DEPENDABOT_WORKFLOW_TOKEN }}
          branch: ${{ github.event.pull_request.head.ref }}

  build-docs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: pyiron/actions/build-docs@main
        with:
          python-version: '3.10'
          env-prefix: /usr/share/miniconda3/envs/my-env
          env-label: linux-64-py-3-10
          env-files: ${{ inputs.docs-env-files }}

  build-notebooks:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: pyiron/actions/build-notebooks@main
        with:
          python-version: '3.10'
          env-prefix: /usr/share/miniconda3/envs/my-env
          env-label: linux-64-py-3-10
          env-files: ${{ inputs.notebooks-env-files }}
          exclusion-file: ${{ inputs.notebooks-exclusion-file }}


  tests-coverage-coveralls-codacy:
    runs-on: ${{ matrix.operating-system }}
    strategy:
      matrix:
        include:
          - operating-system: macos-latest
            python-version: '3.10'
            label: osx-64-py-3-10
            prefix: /Users/runner/miniconda3/envs/my-env

          - operating-system: windows-latest
            python-version: '3.10'
            label: win-64-py-3-10
            prefix: C:\Miniconda3\envs\my-env

          - operating-system: ubuntu-latest
            python-version: '3.10'
            label: linux-64-py-3-10
            prefix: /usr/share/miniconda3/envs/my-env

          - operating-system: ubuntu-latest
            python-version: 3.9
            label: linux-64-py-3-9
            prefix: /usr/share/miniconda3/envs/my-env

          - operating-system: ubuntu-latest
            python-version: 3.8
            label: linux-64-py-3-8
            prefix: /usr/share/miniconda3/envs/my-env

    steps:
    - uses: actions/checkout@v3
    - uses: pyiron/actions/unit-tests@main
      with:
        python-version: ${{ matrix.python-version }}
        env-prefix: ${{ matrix.prefix }}
        env-label: ${{ matrix.label }}
        env-files: ${{ inputs.tests-env-files }}
    - name: Coverage
      if: matrix.label == 'linux-64-py-3-10'
      continue-on-error: True
      shell: bash -l {0}
      run: |
        coverage combine
        coveralls --service=github
        coverage xml
    - name: Codacy
      if: matrix.label == 'linux-64-py-3-10' && github.event_name != 'push'
      continue-on-error: True
      shell: bash -l {0}
      run: |
        python-codacy-coverage -r coverage.xml

  pip-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: pyiron/actions/pip-check@main
        with:
          python-version: '3.10'
          env-prefix: /usr/share/miniconda3/envs/my-env
          env-label: linux-64-py-3-10

  black:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: psf/black@stable
        with:
          options: "--check --diff"
          src: ./${{ github.event.repository.name }}

  codeql:
    uses: pyiron/actions/.github/workflows/codeql.yml@main
    secrets: inherit