name: 'Unit tests'
description: 'Run unittest with coverage'

inputs:
  python-version:
    description: 'Which version of the python interpreter to use, e.g. "3.12"'
    required: true
  env-files:
    type: string
    description: 'Paths to an arbitrary number of (space-separated) conda environment yaml files'
    default: .ci_support/environment.yml
    required: false
  standard-unittests-env-file:
    type: string
    description: 'Env files this action thinks are useful (adds jupyter and papermill packages)'
    default: $GITHUB_ACTION_PATH/../.support/environment-unittests.yml
    required: false
  coveralls-codacy-env-file:
    type: string
    description: 'Path to the Codacy and coveralls environment file. DEPRECATED: Include custom envs in env-files input, or enable the default with add-standard-codacy-env and add-standard-coveralls-env'
    default: ''
    required: false
  add-standard-codacy-env:
    type: boolean
    description: 'Whether to include the standard Codacy environment file'
    default: true
    required: false
  add-standard-coveralls-env:
    type: boolean
    description: 'Whether to include the standard Coveralls environment file'
    default: true
    required: false
  test-dir:
    type: string
    description: 'The directory containing the tests'
    default: tests
    required: false
  omit-patterns:
    type: string
    description: 'Patterns passed to --omit for skipping coverage'
    default: '*/_version.py'
    required: false
# TODO: Allow omission of additional files with a bash for-loop over source-dir and omitted-files

runs:
  using: 'composite'
  steps:
  - name: Prepare environment files
    id: prepare-env-files
    shell: bash -l {0}
    run: |
      ENV_FILES="${{ inputs.standard-unittests-env-file }}"
      ENV_FILES="${ENV_FILES//\\//}"
      
      SUPPORT_DIR="${GITHUB_ACTION_PATH//\\//}/../.support"

      # For Codacy: use the specified file if not empty, otherwise use the standard file if the flag is true
      if [[ -n "${{ inputs.standard-codacy-env-file }}" ]]; then
        ENV_FILES="$ENV_FILES ${{ inputs.standard-codacy-env-file }}"
      elif [[ "${{ inputs.add-standard-codacy-env }}" == "true" ]]; then
        ENV_FILES="$ENV_FILES ${SUPPORT_DIR}/environment-codacy.yml"
      fi

      # For Coveralls: use the specified file if not empty, otherwise use the standard file if the flag is true
      if [[ -n "${{ inputs.standard-coveralls-env-file }}" ]]; then
        ENV_FILES="$ENV_FILES ${{ inputs.standard-coveralls-env-file }}"
      elif [[ "${{ inputs.add-standard-coveralls-env }}" == "true" ]]; then
        ENV_FILES="$ENV_FILES ${SUPPORT_DIR}/environment-coveralls.yml"
      fi

      ENV_FILES="$ENV_FILES ${{ inputs.env-files }}"
      echo "ENV_FILES = ${ENV_FILES}"
      echo "env_files=$ENV_FILES" >> $GITHUB_OUTPUT

  - uses: pyiron/actions/cached-miniforge@actions-4.0.4
    with:
      python-version: ${{ inputs.python-version }}
      env-files: ${{ steps.prepare-env-files.outputs.env_files }}
  - uses: pyiron/actions/pyiron-config@actions-4.0.4
  - name: Test
    shell: bash -l {0}
    run: |
      coverage run --omit=${{ inputs.omit-patterns }} -m unittest discover ${{ inputs.test-dir }}
