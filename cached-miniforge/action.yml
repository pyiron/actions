name: 'Setup cached miniforge'
description: 'Use conda environment files to build a cached (optional) python environment with miniforge, and local code with pip install'

inputs:
  python-version:
    description: 'Which version of the python interpreter to use, e.g. "3.11"'
    required: true
  env-files:
    description: 'Paths to an arbitrary number of (space-separated) conda environment yaml files'
    default: .ci_support/environment.yml
    required: false
  do-cache:
    description: 'A boolean flag for whether or not to leverage environment caching'
    default: 'true'
    required: false
  env-label:
    description: 'A label for the environment. When left empty, a label is generated automatically.'
    required: false
  miniforge-variant:
    description: 'conda-incubator/setup-miniconda argument'
    default: Mambaforge
    required: false
  miniforge-version:
    description: 'conda-incubator/setup-miniconda argument'
    default: latest
    required: false
  miniforge-channels:
    description: 'conda-incubator/setup-miniconda argument'
    default: conda-forge
    required: false
  miniforge-channel-priority:
    description: 'conda-incubator/setup-miniconda argument'
    default: strict
    required: false
  miniforge-activate-environment:
    description: 'conda-incubator/setup-miniconda argument'
    default: my-env
    required: false
  miniforge-use-mamba:
    description: 'conda-incubator/setup-miniconda argument'
    default: 'true'
    required: false


runs:
  using: "composite"
  steps:
  - uses: pyiron/actions/write-environment@update_env_setup
    with:
      env-files: ${{ inputs.env-files }}
  - name: Setup Mambaforge
    uses: conda-incubator/setup-miniconda@v3
    with:
      python-version: ${{ inputs.python-version }}
      miniforge-variant: ${{ inputs.miniforge-variant }}
      miniforge-version: ${{ inputs.miniforge-version }}
      channels: ${{ inputs.miniforge-channels }}
      channel-priority: ${{ inputs.miniforge-channel-priority }}
      activate-environment: ${{ inputs.miniforge-activate-environment }}
      use-mamba: ${{ inputs.miniforge-use-mamba }}
  - name: Get cache date
    id: get-date
    shell: bash -l {0}
    run: |
      echo "TODAY=$(date +'%Y%m%d')" >> $GITHUB_OUTPUT
  - name: Get cache label
    id: get-label
    shell: bash -l {0}
    run: |
      pyversion_string=${{ inputs.python-version }}
      pyversion_string=${pyversion_string/\./-}
      if [[ ${{ runner.os }} == "macOS" ]]; then
        env_prefix_string=/Users/runner/miniconda3/envs/${{ inputs.miniforge-activate-environment }}
      elif [[ ${{ runner.os }} == "Windows" ]]; then
        echo env_prefix_string=C:\Miniconda3\envs\${{ inputs.miniforge-activate-environment }}
      elif [[ ${{ runner.os }} == "Linux" ]]; then
        echo env_prefix_string=/usr/share/miniconda3/envs/${{ inputs.miniforge-activate-environment }}
      fi
      echo ENV_LABEL=${{ runner.os }}-${{ runner.arch }}-py-${pyversion_string} >> $GITHUB_OUTPUT
  - name: Get environment hash
    id: get-hash
    shell: bash -l {0}
    run: |
      echo ${{ env.WRITE_ENVIRONMENT_OUTPUT_ENV_FILE }}
      echo ${{ steps.get-date.outputs.TODAY }}
      echo ${{ steps.get-label.outputs.ENV_LABEL }}
      echo ${{ hashFiles('environment.yml') }}
      local_env_var=$${{ env.WRITE_ENVIRONMENT_OUTPUT_ENV_FILE }}
      echo ${{ hashFiles(env.WRITE_ENVIRONMENT_OUTPUT_ENV_FILE) }}
      hash_key="TODO"
      echo HASH_KEY=${hash_key} >> $GITHUB_OUTPUT#