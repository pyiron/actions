name: 'Setup cached miniforge'
description: 'Use conda environment files to build a cached (optional) python environment with miniforge, and (optionally) local code with pip install'

inputs:
  python-version:
    description: 'Which version of the python interpreter to use, e.g. "3.12"'
    required: true
  env-files:
    description: 'Paths to an arbitrary number of (space-separated) conda environment yaml files'
    default: .ci_support/environment.yml
    required: false
  use-cache:
    description: 'A stringified boolean flag for whether or not to leverage environment caching'
    default: 'true'
    required: false
  cache-number:
    description: 'A stringified integer for the cache number (can be used to force-bump the cache)'
    default: '0'
    required: false
  env-path:
    description: 'A full path to the environment, used for miniconda activate-environment and cache path'
    default: 'cached-miniforge/my-env'
    required: false
  local-code-directory:
    description: 'The location containing the code under development; targeted by pip install. If an empty string, local code will not be pip-installed at all!'
    default: '.'
    required: false
  miniforge-variant:
    description: 'conda-incubator/setup-miniconda argument'
    default: Miniforge3
    required: false
  miniforge-version:
    description: 'conda-incubator/setup-miniconda argument'
    default: latest
    required: false
  miniforge-channels:
    description: 'conda-incubator/setup-miniconda argument'
    default: conda-forge
    # default: conda-forge,nodefaults  # TODO: Use nodefaults directly once setup-miniconda is fixed
    required: false
  miniforge-channel-priority:
    description: 'conda-incubator/setup-miniconda argument'
    default: strict
    required: false
  miniforge-condarc-file:
    description: 'conda-incubator/setup-miniconda argument, BUT we change the default to resolve https://github.com/conda-incubator/setup-miniconda/issues/207'
    default: '.condarc'
    required: false
  miniforge-activate-environment:
    description: 'DEPRECATED. Use env-path and include a path instead. If provided, will be used as the new env-path with cached-miniforge/ prepended as the path.'
    default: ''
    required: false
  pip-install-versioneer:
    description: 'Pip-install versioneer[toml]'
    default: 'true'
    required: false
  versioneer-version:
    description: 'Version of versioneer to install (if requested)'
    default: '0.29'
    required: false
  no-build-isolation:
    description: 'Whether to pip install local code with --no-build-isolation'
    default: 'true'
    required: false


runs:
  using: "composite"
  steps:
  - uses: pyiron/actions/write-environment@v3.3.2
    with:
      env-files: ${{ inputs.env-files }}
  - name: Env name backwards compatibility patch
    # Can be replaced with direct usage of `inputs.env-path` after a major version bump
    id: env-path-backwards-compatibility
    shell: bash -l {0}
    run: |
      if [ -z "${{ inputs.miniforge-activate-environment }}" ]; then
          env_path=${{ inputs.env-path }}
      else
          env_path=cached-miniforge/${{ inputs.miniforge-activate-environment }}
      fi
      echo env-path=${env_path} >> $GITHUB_OUTPUT
  - name: Calculate cache label info
    if: inputs.use-cache == 'true'
    id: cache-info
    shell: bash -l {0}
    run: |
      pyversion_string=${{ inputs.python-version }}
      pyversion_string=${pyversion_string/\./-}
      env_string=${{ steps.env-path-backwards-compatibility.outputs.env-path }}
      env_string=${env_string//\//-}
      LABEL=${{ runner.os }}-${{ runner.arch }}-py-${pyversion_string}-${env_string}
      HASH=${{ hashFiles(env.WRITE_ENVIRONMENT_OUTPUT_ENV_FILE) }}
      TODAY=$(date +'%Y%m%d')
      echo CASH_KEY=${LABEL}-conda-${HASH}-${TODAY}-${{ inputs.cache-number }} >> $GITHUB_OUTPUT
  - name: Look for cached environment
    if: inputs.use-cache == 'true'
    uses: actions/cache/restore@v4
    id: look-for-cache
    with:
      path: ${{ steps.env-path-backwards-compatibility.outputs.env-path }}
      key: ${{ steps.cache-info.outputs.CASH_KEY }}
      lookup-only: true
  - name: Prepopulate condarc
    # To resolve: https://github.com/conda-incubator/setup-miniconda/issues/207
    # Because conda behaves like this: https://github.com/conda/conda/issues/12356
    # And now using `default` can cost money: https://www.anaconda.com/blog/is-conda-free
    # Only necessary until conda-incubator/setup-miniconda is fixed: https://github.com/conda-incubator/setup-miniconda/pull/364
    shell: bash -l {0}
    run: |
      echo "channels:" > "${{ inputs.miniforge-condarc-file }}"
      IFS=',' read -ra CHANNELS <<< "${{ inputs.miniforge-channels }}"
      for channel in "${CHANNELS[@]}"; do
          channel=$(echo "$channel" | xargs)
          echo "- $channel" >> "${{ inputs.miniforge-condarc-file }}"
      done
      echo "Prepopulated condarc file ${{ inputs.miniforge-condarc-file }}:"
      cat ${{ inputs.miniforge-condarc-file }}
  - name: Install using cached env
    if: inputs.use-cache == 'true' && steps.look-for-cache.outputs.cache-hit == 'true'
    uses: conda-incubator/setup-miniconda@v3
    with:
      miniforge-variant: ${{ inputs.miniforge-variant }}
      miniforge-version: ${{ inputs.miniforge-version }}
      # channels: ${{ inputs.miniforge-channels }}
      condarc-file: ${{ inputs.miniforge-condarc-file }}  # TODO: Use channels once setup-miniconda is fixed
      channel-priority: ${{ inputs.miniforge-channel-priority }}
      activate-environment: ${{ steps.env-path-backwards-compatibility.outputs.env-path }}
  - name: Load cached environment
    if: inputs.use-cache == 'true' && steps.look-for-cache.outputs.cache-hit == 'true'
    uses: actions/cache/restore@v4
    with:
      path: ${{ steps.env-path-backwards-compatibility.outputs.env-path }}
      key: ${{ steps.cache-info.outputs.CASH_KEY }}
  - name: Build environment from file
    if: inputs.use-cache != 'true' || steps.look-for-cache.outputs.cache-hit != 'true'
    uses: conda-incubator/setup-miniconda@v3
    with:
      python-version: ${{ inputs.python-version }}
      miniforge-variant: ${{ inputs.miniforge-variant }}
      miniforge-version: ${{ inputs.miniforge-version }}
      # channels: ${{ inputs.miniforge-channels }}
      condarc-file: ${{ inputs.miniforge-condarc-file }}  # TODO: Use channels once setup-miniconda is fixed
      channel-priority: ${{ inputs.miniforge-channel-priority }}
      activate-environment: ${{ steps.env-path-backwards-compatibility.outputs.env-path }}
      environment-file: ${{ env.WRITE_ENVIRONMENT_OUTPUT_ENV_FILE }}
  - name: Cache new env
    if: inputs.use-cache == 'true' && steps.look-for-cache.outputs.cache-hit != 'true'
    uses: actions/cache/save@v4
    id: cache-env
    with:
      path: ${{ steps.env-path-backwards-compatibility.outputs.env-path }}
      key: ${{ steps.cache-info.outputs.CASH_KEY }}
  - name: Display env info
    shell: bash -l {0}
    run: |
      conda info
      conda list
  - name: Install versioneer
    if: inputs.local-code-directory != '' && inputs.pip-install-versioneer == 'true'
    shell: bash -l {0}
    run: |
      pip install versioneer[toml]==${{ inputs.versioneer-version }}
  - name: Install local code without build isolation
    if: inputs.local-code-directory != '' && inputs.no-build-isolation == 'true'
    shell: bash -l {0}
    run: pip install --no-deps ${{ inputs.local-code-directory }} --no-build-isolation
  - name: Install local code with build isolation
    if: inputs.local-code-directory != '' && inputs.no-build-isolation != 'true'
    shell: bash -l {0}
    run: pip install --no-deps ${{ inputs.local-code-directory }}